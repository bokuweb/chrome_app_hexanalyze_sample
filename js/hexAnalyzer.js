// Generated by CoffeeScript 1.8.0
(function() {
  this.HexAnalyzer = (function() {
    var _analyze, _bin, _fileEntry, _load, _loadCompleteCallback, _pushBinArray;

    _fileEntry = null;

    _bin = [];

    _loadCompleteCallback = null;

    function HexAnalyzer(parameter) {
      var _$filePathDisplay, _$fileSelectButton;
      _$fileSelectButton = parameter.selectFileId;
      _$filePathDisplay = parameter.filePathDisplayId;
      _loadCompleteCallback = parameter.loadCompleteCallback;
      _$fileSelectButton.on('click', function() {
        return chrome.fileSystem.chooseEntry({
          type: 'openFile'
        }, function(entry) {
          _fileEntry = entry;
          entry.file(function(file) {
            var reader;
            reader = new FileReader();
            return reader.readAsText(file);
          });
          return chrome.fileSystem.getDisplayPath(entry, function(displayPath) {
            if (_$filePathDisplay !== null) {
              _$filePathDisplay.val(displayPath);
            }
            return _load();
          });
        });
      });
    }

    HexAnalyzer.prototype.getBin = function() {
      return _bin;
    };

    _load = function() {
      var hxf;
      hxf = [];
      if (_fileEntry !== null) {
        return _fileEntry.file(function(file) {
          var reader;
          reader = new FileReader();
          reader.onloadend = function(e) {
            hxf = e.target.result.split('\n');
            return _analyze(hxf);
          };
          return reader.readAsText(file);
        });
      }
    };

    _analyze = function(hxf) {
      var address, length, type, value, _i, _len;
      for (_i = 0, _len = hxf.length; _i < _len; _i++) {
        value = hxf[_i];
        if (value.substring(0, 1) !== ':') {
          console.log("error - not *.hex file");
        }
        length = parseInt(value.substring(1, 3), 16);
        address = parseInt(value.substring(3, 7), 16);
        type = parseInt(value.substring(7, 9), 16);
        switch (type) {
          case 0:
            _pushBinArray(value.substring(9, 9 + length * 2), length);
            break;
          case 1:
            console.log("end of file");
            _loadCompleteCallback();
            return;
          case 2:
            break;
        }
      }
    };

    _pushBinArray = function(data, length) {
      var counter, _results;
      counter = 0;
      _results = [];
      while (counter < length) {
        _bin.push(parseInt(data.substring(counter * 2, counter * 2 + 2), 16));
        _results.push(counter++);
      }
      return _results;
    };

    return HexAnalyzer;

  })();

}).call(this);
